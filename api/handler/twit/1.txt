
// @Summary CreatePhoto
// @Security ApiKeyAuth
// @Description Upload Twit Photo
// @Tags TWIT API
// @Param twit_id path string true "twit_id"
// @Param file formData file true "UploadMediaForm"
// @Success 200 {object} string
// @Failure 400 {object} string
// @Failure 500 {object} string
// @Router /v1/twit/photo/{twit_id} [post]
func (h *newTwits) CreatePhoto(c *gin.Context) {
	h.Log.Info("UploadProductPhoto called")

	Id := c.Param("twit_id")
	if len(Id) == 0 {
		h.Log.Error("twit_id is required")
		c.AbortWithStatusJSON(http.StatusBadRequest, gin.H{"error": "Twit ID is required"})
		return
	}

	file, header, err := c.Request.FormFile("file")
	if err != nil {
		h.Log.Error("Error retrieving the file", "error", err)
		c.AbortWithStatusJSON(http.StatusBadRequest, gin.H{"error": "Error retrieving the file"})
		return
	}

	defer file.Close()

	// url, err := h.MINIO.UploadFile("photos", file, header)
	// if err != nil {
	// 	h.Log.Error("Error uploading the file to MinIO", "error", err)
	// 	c.AbortWithStatusJSON(http.StatusInternalServerError, gin.H{"error": "Error uploading the file to MinIO"})
	// 	return
	// }
	ctx := context.Background()
	bucketName := "photos"

	// Generate unique filename
	fileExt := filepath.Ext(header.Filename)
	newFileName := uuid.NewString() + fileExt
	fmt.Println(bucketName, header.Size, newFileName)
	cfg := config.Load()
	minioClient, err := minio.New(cfg.Minio.MINIO_ENDPOINT, &minio.Options{
		Creds:  credentials.NewStaticV4(cfg.Minio.MINIO_ACCESS_KEY_ID, cfg.Minio.MINIO_SECRET_ACCESS_KEY, ""),
		Secure: false,
	})
	if err != nil {
		c.AbortWithError(500, err)
		return
	}
	// Upload the file
	_, err = minioClient.PutObject(context.Background(), "questions", newFileName, file, header.Size, minio.PutObjectOptions{
		ContentType: "image/jpeg",
	})

	if err != nil {
		c.AbortWithError(500, err)
        return
	}

	// Set bucket policy for public access
	policy := fmt.Sprintf(`{
		"Version": "2012-10-17",
		"Statement": [
			{
				"Effect": "Allow",
				"Principal": {
					"AWS": ["*"]
				},
				"Action": ["s3:GetObject"],
				"Resource": ["arn:aws:s3:::%s/*"]
			}
		]
	}`, bucketName)

	err = minioClient.SetBucketPolicy(ctx, bucketName, policy)
	if err != nil {
		c.AbortWithError(500, err)
        return
	}

	// Generate URL
	url := fmt.Sprintf("http://%s/%s/%s", config.Load().Minio.MINIO_ENDPOINT, bucketName, newFileName)
	fmt.Println("miniodan chiqvoti")
	photo_id, err := h.Twit.CreatePhoto(&model.CreatePhotoRequest{
		TwitID: Id,
		Photo:  url,
	})
	if err != nil {
		h.Log.Error("Error creating photo", "error", err)
		c.AbortWithStatusJSON(http.StatusInternalServerError, gin.H{"error": "Error creating photo"})
		return
	}
	h.Log.Info("Photo uploaded successfully")
	c.JSON(http.StatusOK, gin.H{"photo_id": photo_id, "url": url})
}





// @Summary CreatePhoto
// @Security ApiKeyAuth
// @Description Upload Twit Photo
// @Tags TWIT API
// @Param twit_id path string true "twit_id"
// @Param file formData file true "UploadMediaForm"
// @Success 200 {object} string
// @Failure 400 {object} string
// @Failure 500 {object} string
// @Router /v1/twit/photo/{twit_id} [post]
func (h *newTwits) CreatePhoto(c *gin.Context) {
	h.Log.Info("UploadProductPhoto called")

	Id := c.Param("twit_id")
	if len(Id) == 0 {
		h.Log.Error("twit_id is required")
		c.AbortWithStatusJSON(http.StatusBadRequest, gin.H{"error": "Twit ID is required"})
		return
	}

	file, header, err := c.Request.FormFile("file")
	if err != nil {
		h.Log.Error("Error retrieving the file", "error", err)
		c.AbortWithStatusJSON(http.StatusBadRequest, gin.H{"error": "Error retrieving the file"})
		return
	}
	fmt.Println(file)
	defer file.Close()
	fmt.Println("minioga kirvoti")
	url, err := h.MINIO.UploadFile("photos", file, header)
	if err != nil {
		h.Log.Error("Error uploading the file to MinIO", "error", err)
		c.AbortWithStatusJSON(http.StatusInternalServerError, gin.H{"error": "Error uploading the file to MinIO"})
		return
	}
	photo_id, err := h.Twit.CreatePhoto(&model.CreatePhotoRequest{
		TwitID: Id,
		Photo:  url,
	})
	if err != nil {
		h.Log.Error("Error creating photo", "error", err)
		c.AbortWithStatusJSON(http.StatusInternalServerError, gin.H{"error": "Error creating photo"})
		return
	}
	h.Log.Info("Photo uploaded successfully")
	c.JSON(http.StatusOK, gin.H{"photo_id": photo_id, "url": url})
}
