// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.27.1
// source: api/twit.proto

package user

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	TwitService_CreateTwit_FullMethodName = "/user.TwitService/CreateTwit"
	TwitService_GetTwit_FullMethodName    = "/user.TwitService/GetTwit"
)

// TwitServiceClient is the client API for TwitService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type TwitServiceClient interface {
	CreateTwit(ctx context.Context, in *CreateTwitReq, opts ...grpc.CallOption) (*Twit, error)
	GetTwit(ctx context.Context, in *GetTwitReq, opts ...grpc.CallOption) (*Twit, error)
}

type twitServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewTwitServiceClient(cc grpc.ClientConnInterface) TwitServiceClient {
	return &twitServiceClient{cc}
}

func (c *twitServiceClient) CreateTwit(ctx context.Context, in *CreateTwitReq, opts ...grpc.CallOption) (*Twit, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Twit)
	err := c.cc.Invoke(ctx, TwitService_CreateTwit_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *twitServiceClient) GetTwit(ctx context.Context, in *GetTwitReq, opts ...grpc.CallOption) (*Twit, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Twit)
	err := c.cc.Invoke(ctx, TwitService_GetTwit_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// TwitServiceServer is the server API for TwitService service.
// All implementations must embed UnimplementedTwitServiceServer
// for forward compatibility.
type TwitServiceServer interface {
	CreateTwit(context.Context, *CreateTwitReq) (*Twit, error)
	GetTwit(context.Context, *GetTwitReq) (*Twit, error)
	mustEmbedUnimplementedTwitServiceServer()
}

// UnimplementedTwitServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedTwitServiceServer struct{}

func (UnimplementedTwitServiceServer) CreateTwit(context.Context, *CreateTwitReq) (*Twit, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateTwit not implemented")
}
func (UnimplementedTwitServiceServer) GetTwit(context.Context, *GetTwitReq) (*Twit, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTwit not implemented")
}
func (UnimplementedTwitServiceServer) mustEmbedUnimplementedTwitServiceServer() {}
func (UnimplementedTwitServiceServer) testEmbeddedByValue()                     {}

// UnsafeTwitServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to TwitServiceServer will
// result in compilation errors.
type UnsafeTwitServiceServer interface {
	mustEmbedUnimplementedTwitServiceServer()
}

func RegisterTwitServiceServer(s grpc.ServiceRegistrar, srv TwitServiceServer) {
	// If the following call pancis, it indicates UnimplementedTwitServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&TwitService_ServiceDesc, srv)
}

func _TwitService_CreateTwit_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateTwitReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TwitServiceServer).CreateTwit(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TwitService_CreateTwit_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TwitServiceServer).CreateTwit(ctx, req.(*CreateTwitReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _TwitService_GetTwit_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetTwitReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TwitServiceServer).GetTwit(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TwitService_GetTwit_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TwitServiceServer).GetTwit(ctx, req.(*GetTwitReq))
	}
	return interceptor(ctx, in, info, handler)
}

// TwitService_ServiceDesc is the grpc.ServiceDesc for TwitService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var TwitService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "user.TwitService",
	HandlerType: (*TwitServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateTwit",
			Handler:    _TwitService_CreateTwit_Handler,
		},
		{
			MethodName: "GetTwit",
			Handler:    _TwitService_GetTwit_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api/twit.proto",
}
