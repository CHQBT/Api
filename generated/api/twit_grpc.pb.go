// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.27.1
// source: api/twit.proto

package user

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	TwitService_CreateTwit_FullMethodName         = "/user.TwitService/CreateTwit"
	TwitService_GetTwit_FullMethodName            = "/user.TwitService/GetTwit"
	TwitService_GetAllTwits_FullMethodName        = "/user.TwitService/GetAllTwits"
	TwitService_GetTwitsByType_FullMethodName     = "/user.TwitService/GetTwitsByType"
	TwitService_GetMostViewedTwits_FullMethodName = "/user.TwitService/GetMostViewedTwits"
	TwitService_GetLatestTwits_FullMethodName     = "/user.TwitService/GetLatestTwits"
	TwitService_SearchTwits_FullMethodName        = "/user.TwitService/SearchTwits"
	TwitService_DeleteTwit_FullMethodName         = "/user.TwitService/DeleteTwit"
	TwitService_AddCountToTwit_FullMethodName     = "/user.TwitService/AddCountToTwit"
	TwitService_CreateVideo_FullMethodName        = "/user.TwitService/CreateVideo"
	TwitService_CreatePhoto_FullMethodName        = "/user.TwitService/CreatePhoto"
	TwitService_CreateMusic_FullMethodName        = "/user.TwitService/CreateMusic"
	TwitService_CreateLocation_FullMethodName     = "/user.TwitService/CreateLocation"
	TwitService_CreateUrl_FullMethodName          = "/user.TwitService/CreateUrl"
)

// TwitServiceClient is the client API for TwitService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type TwitServiceClient interface {
	CreateTwit(ctx context.Context, in *CreateTwitReq, opts ...grpc.CallOption) (*TWitId, error)
	GetTwit(ctx context.Context, in *TWitId, opts ...grpc.CallOption) (*Twit, error)
	GetAllTwits(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*TwitList, error)
	GetTwitsByType(ctx context.Context, in *TypeRequest, opts ...grpc.CallOption) (*TwitList, error)
	GetMostViewedTwits(ctx context.Context, in *LimitRequest, opts ...grpc.CallOption) (*TwitList, error)
	GetLatestTwits(ctx context.Context, in *LimitRequest, opts ...grpc.CallOption) (*TwitList, error)
	SearchTwits(ctx context.Context, in *SearchRequest, opts ...grpc.CallOption) (*TwitList, error)
	DeleteTwit(ctx context.Context, in *TWitId, opts ...grpc.CallOption) (*Empty, error)
	AddCountToTwit(ctx context.Context, in *TWitId, opts ...grpc.CallOption) (*Empty, error)
	CreateVideo(ctx context.Context, in *CreateVideoReq, opts ...grpc.CallOption) (*VideoId, error)
	CreatePhoto(ctx context.Context, in *CreatePhotoReq, opts ...grpc.CallOption) (*PhotoId, error)
	CreateMusic(ctx context.Context, in *CreateMusicReq, opts ...grpc.CallOption) (*MusicId, error)
	CreateLocation(ctx context.Context, in *CreateLocationReq, opts ...grpc.CallOption) (*LocationId, error)
	CreateUrl(ctx context.Context, in *CreateUrlReq, opts ...grpc.CallOption) (*UrlId, error)
}

type twitServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewTwitServiceClient(cc grpc.ClientConnInterface) TwitServiceClient {
	return &twitServiceClient{cc}
}

func (c *twitServiceClient) CreateTwit(ctx context.Context, in *CreateTwitReq, opts ...grpc.CallOption) (*TWitId, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(TWitId)
	err := c.cc.Invoke(ctx, TwitService_CreateTwit_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *twitServiceClient) GetTwit(ctx context.Context, in *TWitId, opts ...grpc.CallOption) (*Twit, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Twit)
	err := c.cc.Invoke(ctx, TwitService_GetTwit_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *twitServiceClient) GetAllTwits(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*TwitList, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(TwitList)
	err := c.cc.Invoke(ctx, TwitService_GetAllTwits_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *twitServiceClient) GetTwitsByType(ctx context.Context, in *TypeRequest, opts ...grpc.CallOption) (*TwitList, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(TwitList)
	err := c.cc.Invoke(ctx, TwitService_GetTwitsByType_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *twitServiceClient) GetMostViewedTwits(ctx context.Context, in *LimitRequest, opts ...grpc.CallOption) (*TwitList, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(TwitList)
	err := c.cc.Invoke(ctx, TwitService_GetMostViewedTwits_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *twitServiceClient) GetLatestTwits(ctx context.Context, in *LimitRequest, opts ...grpc.CallOption) (*TwitList, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(TwitList)
	err := c.cc.Invoke(ctx, TwitService_GetLatestTwits_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *twitServiceClient) SearchTwits(ctx context.Context, in *SearchRequest, opts ...grpc.CallOption) (*TwitList, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(TwitList)
	err := c.cc.Invoke(ctx, TwitService_SearchTwits_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *twitServiceClient) DeleteTwit(ctx context.Context, in *TWitId, opts ...grpc.CallOption) (*Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Empty)
	err := c.cc.Invoke(ctx, TwitService_DeleteTwit_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *twitServiceClient) AddCountToTwit(ctx context.Context, in *TWitId, opts ...grpc.CallOption) (*Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Empty)
	err := c.cc.Invoke(ctx, TwitService_AddCountToTwit_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *twitServiceClient) CreateVideo(ctx context.Context, in *CreateVideoReq, opts ...grpc.CallOption) (*VideoId, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(VideoId)
	err := c.cc.Invoke(ctx, TwitService_CreateVideo_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *twitServiceClient) CreatePhoto(ctx context.Context, in *CreatePhotoReq, opts ...grpc.CallOption) (*PhotoId, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(PhotoId)
	err := c.cc.Invoke(ctx, TwitService_CreatePhoto_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *twitServiceClient) CreateMusic(ctx context.Context, in *CreateMusicReq, opts ...grpc.CallOption) (*MusicId, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(MusicId)
	err := c.cc.Invoke(ctx, TwitService_CreateMusic_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *twitServiceClient) CreateLocation(ctx context.Context, in *CreateLocationReq, opts ...grpc.CallOption) (*LocationId, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(LocationId)
	err := c.cc.Invoke(ctx, TwitService_CreateLocation_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *twitServiceClient) CreateUrl(ctx context.Context, in *CreateUrlReq, opts ...grpc.CallOption) (*UrlId, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UrlId)
	err := c.cc.Invoke(ctx, TwitService_CreateUrl_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// TwitServiceServer is the server API for TwitService service.
// All implementations must embed UnimplementedTwitServiceServer
// for forward compatibility.
type TwitServiceServer interface {
	CreateTwit(context.Context, *CreateTwitReq) (*TWitId, error)
	GetTwit(context.Context, *TWitId) (*Twit, error)
	GetAllTwits(context.Context, *Empty) (*TwitList, error)
	GetTwitsByType(context.Context, *TypeRequest) (*TwitList, error)
	GetMostViewedTwits(context.Context, *LimitRequest) (*TwitList, error)
	GetLatestTwits(context.Context, *LimitRequest) (*TwitList, error)
	SearchTwits(context.Context, *SearchRequest) (*TwitList, error)
	DeleteTwit(context.Context, *TWitId) (*Empty, error)
	AddCountToTwit(context.Context, *TWitId) (*Empty, error)
	CreateVideo(context.Context, *CreateVideoReq) (*VideoId, error)
	CreatePhoto(context.Context, *CreatePhotoReq) (*PhotoId, error)
	CreateMusic(context.Context, *CreateMusicReq) (*MusicId, error)
	CreateLocation(context.Context, *CreateLocationReq) (*LocationId, error)
	CreateUrl(context.Context, *CreateUrlReq) (*UrlId, error)
	mustEmbedUnimplementedTwitServiceServer()
}

// UnimplementedTwitServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedTwitServiceServer struct{}

func (UnimplementedTwitServiceServer) CreateTwit(context.Context, *CreateTwitReq) (*TWitId, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateTwit not implemented")
}
func (UnimplementedTwitServiceServer) GetTwit(context.Context, *TWitId) (*Twit, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTwit not implemented")
}
func (UnimplementedTwitServiceServer) GetAllTwits(context.Context, *Empty) (*TwitList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAllTwits not implemented")
}
func (UnimplementedTwitServiceServer) GetTwitsByType(context.Context, *TypeRequest) (*TwitList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTwitsByType not implemented")
}
func (UnimplementedTwitServiceServer) GetMostViewedTwits(context.Context, *LimitRequest) (*TwitList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMostViewedTwits not implemented")
}
func (UnimplementedTwitServiceServer) GetLatestTwits(context.Context, *LimitRequest) (*TwitList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetLatestTwits not implemented")
}
func (UnimplementedTwitServiceServer) SearchTwits(context.Context, *SearchRequest) (*TwitList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SearchTwits not implemented")
}
func (UnimplementedTwitServiceServer) DeleteTwit(context.Context, *TWitId) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteTwit not implemented")
}
func (UnimplementedTwitServiceServer) AddCountToTwit(context.Context, *TWitId) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddCountToTwit not implemented")
}
func (UnimplementedTwitServiceServer) CreateVideo(context.Context, *CreateVideoReq) (*VideoId, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateVideo not implemented")
}
func (UnimplementedTwitServiceServer) CreatePhoto(context.Context, *CreatePhotoReq) (*PhotoId, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreatePhoto not implemented")
}
func (UnimplementedTwitServiceServer) CreateMusic(context.Context, *CreateMusicReq) (*MusicId, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateMusic not implemented")
}
func (UnimplementedTwitServiceServer) CreateLocation(context.Context, *CreateLocationReq) (*LocationId, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateLocation not implemented")
}
func (UnimplementedTwitServiceServer) CreateUrl(context.Context, *CreateUrlReq) (*UrlId, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateUrl not implemented")
}
func (UnimplementedTwitServiceServer) mustEmbedUnimplementedTwitServiceServer() {}
func (UnimplementedTwitServiceServer) testEmbeddedByValue()                     {}

// UnsafeTwitServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to TwitServiceServer will
// result in compilation errors.
type UnsafeTwitServiceServer interface {
	mustEmbedUnimplementedTwitServiceServer()
}

func RegisterTwitServiceServer(s grpc.ServiceRegistrar, srv TwitServiceServer) {
	// If the following call pancis, it indicates UnimplementedTwitServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&TwitService_ServiceDesc, srv)
}

func _TwitService_CreateTwit_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateTwitReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TwitServiceServer).CreateTwit(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TwitService_CreateTwit_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TwitServiceServer).CreateTwit(ctx, req.(*CreateTwitReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _TwitService_GetTwit_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TWitId)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TwitServiceServer).GetTwit(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TwitService_GetTwit_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TwitServiceServer).GetTwit(ctx, req.(*TWitId))
	}
	return interceptor(ctx, in, info, handler)
}

func _TwitService_GetAllTwits_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TwitServiceServer).GetAllTwits(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TwitService_GetAllTwits_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TwitServiceServer).GetAllTwits(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _TwitService_GetTwitsByType_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TypeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TwitServiceServer).GetTwitsByType(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TwitService_GetTwitsByType_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TwitServiceServer).GetTwitsByType(ctx, req.(*TypeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TwitService_GetMostViewedTwits_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LimitRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TwitServiceServer).GetMostViewedTwits(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TwitService_GetMostViewedTwits_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TwitServiceServer).GetMostViewedTwits(ctx, req.(*LimitRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TwitService_GetLatestTwits_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LimitRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TwitServiceServer).GetLatestTwits(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TwitService_GetLatestTwits_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TwitServiceServer).GetLatestTwits(ctx, req.(*LimitRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TwitService_SearchTwits_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SearchRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TwitServiceServer).SearchTwits(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TwitService_SearchTwits_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TwitServiceServer).SearchTwits(ctx, req.(*SearchRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TwitService_DeleteTwit_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TWitId)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TwitServiceServer).DeleteTwit(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TwitService_DeleteTwit_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TwitServiceServer).DeleteTwit(ctx, req.(*TWitId))
	}
	return interceptor(ctx, in, info, handler)
}

func _TwitService_AddCountToTwit_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TWitId)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TwitServiceServer).AddCountToTwit(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TwitService_AddCountToTwit_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TwitServiceServer).AddCountToTwit(ctx, req.(*TWitId))
	}
	return interceptor(ctx, in, info, handler)
}

func _TwitService_CreateVideo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateVideoReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TwitServiceServer).CreateVideo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TwitService_CreateVideo_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TwitServiceServer).CreateVideo(ctx, req.(*CreateVideoReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _TwitService_CreatePhoto_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreatePhotoReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TwitServiceServer).CreatePhoto(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TwitService_CreatePhoto_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TwitServiceServer).CreatePhoto(ctx, req.(*CreatePhotoReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _TwitService_CreateMusic_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateMusicReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TwitServiceServer).CreateMusic(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TwitService_CreateMusic_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TwitServiceServer).CreateMusic(ctx, req.(*CreateMusicReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _TwitService_CreateLocation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateLocationReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TwitServiceServer).CreateLocation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TwitService_CreateLocation_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TwitServiceServer).CreateLocation(ctx, req.(*CreateLocationReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _TwitService_CreateUrl_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateUrlReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TwitServiceServer).CreateUrl(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TwitService_CreateUrl_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TwitServiceServer).CreateUrl(ctx, req.(*CreateUrlReq))
	}
	return interceptor(ctx, in, info, handler)
}

// TwitService_ServiceDesc is the grpc.ServiceDesc for TwitService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var TwitService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "user.TwitService",
	HandlerType: (*TwitServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateTwit",
			Handler:    _TwitService_CreateTwit_Handler,
		},
		{
			MethodName: "GetTwit",
			Handler:    _TwitService_GetTwit_Handler,
		},
		{
			MethodName: "GetAllTwits",
			Handler:    _TwitService_GetAllTwits_Handler,
		},
		{
			MethodName: "GetTwitsByType",
			Handler:    _TwitService_GetTwitsByType_Handler,
		},
		{
			MethodName: "GetMostViewedTwits",
			Handler:    _TwitService_GetMostViewedTwits_Handler,
		},
		{
			MethodName: "GetLatestTwits",
			Handler:    _TwitService_GetLatestTwits_Handler,
		},
		{
			MethodName: "SearchTwits",
			Handler:    _TwitService_SearchTwits_Handler,
		},
		{
			MethodName: "DeleteTwit",
			Handler:    _TwitService_DeleteTwit_Handler,
		},
		{
			MethodName: "AddCountToTwit",
			Handler:    _TwitService_AddCountToTwit_Handler,
		},
		{
			MethodName: "CreateVideo",
			Handler:    _TwitService_CreateVideo_Handler,
		},
		{
			MethodName: "CreatePhoto",
			Handler:    _TwitService_CreatePhoto_Handler,
		},
		{
			MethodName: "CreateMusic",
			Handler:    _TwitService_CreateMusic_Handler,
		},
		{
			MethodName: "CreateLocation",
			Handler:    _TwitService_CreateLocation_Handler,
		},
		{
			MethodName: "CreateUrl",
			Handler:    _TwitService_CreateUrl_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api/twit.proto",
}
