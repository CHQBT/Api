syntax = "proto3";
package user;
option go_package = "milliy/generated/user";
import "google/api/annotations.proto";
import "protoc-gen-openapiv2/options/annotations.proto";

service TwitService {
    rpc CreateTwit(CreateTwitReq) returns (TWitId) {
        option (google.api.http) = {
            post: "/v1/twit"
            body: "*"
        };
        option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
            description: "Create a new twit"
            security: {
                security_requirement: {
                    key: "ApiKeyAuth"
                    value: {}
                }
            }
        };
    }
    
    rpc GetTwit(TWitId) returns (Twit) {
        option (google.api.http) = {
            get: "/v1/twit/{id}"
        };
        option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
            description: "Register a new user"
        };
    }

    rpc GetAllTwits(Empty) returns (TwitList) {
        option (google.api.http) = {
            get: "/v1/twits"
        };
    }

    rpc GetTwitsByType(TypeRequest) returns (TwitList) {
        option (google.api.http) = {
            get: "/v1/twits/type/{type}"
        };
    }

    rpc GetMostViewedTwits(LimitRequest) returns (TwitList) {
        option (google.api.http) = {
            get: "/v1/twits/most-viewed"
        };
    }

    rpc GetLatestTwits(LimitRequest) returns (TwitList) {
        option (google.api.http) = {
            get: "/v1/twits/latest"
        };
    }

    rpc SearchTwits(SearchRequest) returns (TwitList) {
        option (google.api.http) = {
            get: "/v1/twits/search"
        };
    }

    rpc DeleteTwit(TWitId) returns (Empty){
        option (google.api.http) = {
            delete: "/v1/twits/delete/{id}"
        };
        option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
            description: "delete a twit"
            security: {
                security_requirement: {
                    key: "ApiKeyAuth"
                    value: {}
                }
            }
        };
    }

    rpc AddCountToTwit(TWitId) returns (Empty){
        option (google.api.http) = {
            post: "/v1/twit/{id}"
        };
    }

    rpc CreateVideo(CreateVideoReq) returns (VideoId) {
        option (google.api.http) = {
            post: "/v1/twit/video"
            body: "*"
        };
        option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
            description: "Create a new video"
            security: {
                security_requirement: {
                    key: "ApiKeyAuth"
                    value: {}
                }
            }
        };
    }

    rpc CreatePhoto(CreatePhotoReq) returns (PhotoId) {
        option (google.api.http) = {
            post: "/v1/twit/photo"
            body: "*"
        };
        option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
            description: "Create a new photo"
            security: {
                security_requirement: {
                    key: "ApiKeyAuth"
                    value: {}
                }
            }
        };
    }

    rpc CreateMusic(CreateMusicReq) returns (MusicId) {
        option (google.api.http) = {
            post: "/v1/twit/music"
            body: "*"
        };
        option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
            description: "Create a new music"
            security: {
                security_requirement: {
                    key: "ApiKeyAuth"
                    value: {}
                }
            }
        };
    }

    rpc CreateLocation(CreateLocationReq) returns (LocationId) {
        option (google.api.http) = {
            post: "/v1/twit/location"
            body: "*"
        };
        option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
            description: "Create a new location"
            security: {
                security_requirement: {
                    key: "ApiKeyAuth"
                    value: {}
                }
            }
        };
    }

    rpc CreateUrl(CreateUrlReq) returns (UrlId) {
        option (google.api.http) = {
            post: "/v1/twit/url"
            body: "*"
        };
        option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
            description: "Create a new url"
            security: {
                security_requirement: {
                    key: "ApiKeyAuth"
                    value: {}
                }
            }
        };
    }
}

message CreateTwitReq {
    string user_id = 1;
    string publisher_fio = 2;
    string type = 3;
    string texts = 4;
    string title = 5;
}

message TWitId{
    string id=1;
}

message VideoInfo {
    string video = 1;
}

message PhotoInfo {
    string photo = 1;
}

message MusicInfo {
    string mp3 = 1;
}

message LocationInfo {
    string lat = 1;
    string lon = 2;
}

message UrlInfo {
    string url = 1;
}

message Twit {
    string id = 1;
    string user_id = 2;
    string publisher_fio = 3;
    string type = 4;
    string texts = 5;
    string title = 6;
    int32 readers_count = 7;
    string created_at = 8;
    repeated VideoInfo videos = 9;
    repeated PhotoInfo photos = 10;
    repeated MusicInfo musics = 11;
    repeated LocationInfo locations = 12;
    repeated UrlInfo urls = 13;
}

message Empty {}

message TypeRequest {
    string type = 1;
}

message LimitRequest {
    int32 limit = 1;
}

message SearchRequest {
    string keyword = 1;
}

message TwitList {
    repeated string twit_ids = 1;
}

message CreateVideoReq {
    string twit_id = 1;
    string video = 2;
}

message VideoId {
    string id = 1;
}

message CreatePhotoReq {
    string twit_id = 1;
    string photo = 2;
}

message PhotoId {
    string id = 1;
}

message CreateMusicReq {
    string twit_id = 1;
    string mp3 = 2;
}

message MusicId {
    string id = 1;
}

message CreateLocationReq {
    string twit_id = 1;
    string lat = 2;
    string lon = 3;
}

message LocationId {
    string id = 1;
}

message CreateUrlReq {
    string twit_id = 1;
    string url = 2;
}

message UrlId {
    string id = 1;
} 